# 재귀함수를 이용한 풀이

import sys
n = int(sys.stdin.readline().rstrip())
n_array = list(map(int,sys.stdin.readline().split()))
m = int(sys.stdin.readline().rstrip())
m_array = list(map(int,sys.stdin.readline().split()))

n_array.sort()
m_array.sort()

def binary_selection(array, start, end, target):
    if start > end:
        return 'no'
    mid = (start+end)//2
    if array[mid] == target:
        return 'yes'
    elif array[mid] > target:
        return binary_selection(array, start, mid-1, target)
    elif array[mid] < target:
        return binary_selection(array, mid+1, end, target)

answer = []
for i in m_array:
    answer.append(binary_selection(n_array, 0, n-1, i))

for j in answer:
    print(j, end=' ')

# 반복문을 이용한 문제 풀이
def binary_selection2(array, start, end, target):
    while start <= end:
        mid = (start+end)//2
        if array[mid] == target:
            return 'yes'
        elif array[mid] > target:
            end = mid-1
        else:
            start = mid+1
    return 'no'

answer2 = []
for i in m_array:
    answer2.append(binary_selection2(n_array, 0, n-1, i))

for j in answer2:
    print(j, end=' ')

# 계수 정렬을 이용한 풀이
## 모든 원소의 번호를 포함할 수 있는 크기의 리스트를 만든 뒤에, 리스트 인덱스에 직접 접근하여 특정한 번호의 부품이 매장에 존재하는지 확인하자자
n = int(input())
array = [0]*1000001
for i in input().split():
    array[int(i)] = 1

m = int(input())
x = list(map(int, input().split()))

for i in x:
    if array[i] == 1:
        print('yes', end=' ')
    else:
        print('no', end=' ')




# 집합 자료형을 이용한 문제 해결
## 단순히 특정한 수가 한 번이라도 등장했는지를 검사하면 되므로 집합 자료형을 이용했다
## set()함수는 집합 자료형을 초기화할 때 사용한다
## 집합 자료형은 단순히 특정 데이터가 존재하는지 검사할 때 매우 효과적으로 사용할 수 있다.

n = int(input())
array = set(map(int, input().split()))
m = int(input())
x = list(map(int, input().split()))

for i in x:
    if i in array:
        print('yes', end=' ')
    else:
        print('no', end=' ')

# 5
# 8 3 7 9 2
# 3
# 5 7 9
# 5
# 8 3 7 9 2
# 3
# 5 7 9
# 5
# 8 3 7 9 2
# 3
# 5 7 9
