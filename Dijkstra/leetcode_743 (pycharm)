# 4
# 2
# 2 1 1
# 2 3 1
# 3 4 1
times = [[2,1,1],[2,3,1],[3,4,1]]

import sys
input = sys.stdin.readline
INF = int(1e9)

n = int(input())
start = int(input())

graph = [[] for _ in range(n+1)]
visited = [False] * (n+1)
distance = [INF] * (n+1)

for i in range(len(times)):
        a,b,c = map(int, input().split())
        graph[a].append((b,c))

def get_smallest_node():
        index = 0
        min_value = INF
        for i in range(1, n+1):
                if distance[i] < min_value and not visited[i]:
                        min_value = distance[i]
                        index = i
        return index

def dijkstra(start):
        visited[start] = True
        distance[start] = 0
        for j in graph[start]:
                distance[j[0]] = j[1]
                for i in range(n-1):
                        now = get_smallest_node()
                        visited[now] = True
                        for j in graph[now]:
                                cost = j[1] + distance[now]
                                if cost < distance[j[0]]:
                                        distance[j[0]] = cost

dijkstra(start)

li = []
for i in range(1, n+1):
        if distance[i] == INF:
                li.append(-1)
        else:
                li.append(distance[i])

if -1 in li:
        print(-1)
else:
        print(max(li))
